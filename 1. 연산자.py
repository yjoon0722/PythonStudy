1 + 1 # 2
1 - 2 # -1
2 * 2 # 4
4 / 2 # 2.0
# python3는 나눗셈이 완전히 떨어져도 실수가 나온다.

# 버림 나눗셈
5 // 2 # 2
4 // 2 # 2

5.5 // 2 # 2.0
4 // 2.0 # 2.0
4.1 // 2.1 # 1.0
# 실수에 //를 사용하면 결과는 실수가 나오고 소수점 이하는 버린다. 항상 .0으로 끝남

# 거듭제곱 연산
2 ** 3 # 8
2 ** 10 # 1024

# 값을 정수로 만들기
int(3.3) # 3
int(5/2) # 2
int('10') # 10

# 객체의 자료형 알아내기
type(10) # <class 'int'>
type('a') # <class 'str'>
type(10.0) # <class 'float'>

# 몫과 나머지구하기
divmod(5,2) # (2,1)
# (2,1) 과 같이 값을 괄호로 묶은 형태를 튜플(tuple)라고 한다.

# 실수계산하기
3.5 + 2.1 # 5.6
4.3 - 2.7 # 1.5999999999999996
1.5 * 3.1 # 4.65
5.5 / 3.1 # 1.7741935483870968
# 컴퓨터는 실수를 표현할때 오차가 발생함
# 두 실수가 같읕지 판단할 때는 ==을 사용하면 안된다. ex)0.1+0.2 == 0.3 >> False

# 실수를 비교할 때는 연산한 값과 비교할 값의 차이를 구한 뒤 sys.float_info.epsilon보다 작거나 같은지 판단해야 함
# >>> import math, sys
# >>> x = 0.1 + 0.2
# >>> math.fabs(x - 0.3) <= sys.float_info.epsilon


